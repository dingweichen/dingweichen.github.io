{"pages":[],"posts":[{"title":"本地推送到远端命令","text":"​ 记录了hexo的一些常用命令。 用MakeDown语法写好日志后，执行命令推送到远端 写好文章后，清理本地hexo博客 hexo c 重新本地生成hexo博客 hexo g 将本地的更新推送到远端 hexo d 新建一篇文章1hexo new post 文章名","link":"/2020/08/26/%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%AB%AF%E5%91%BD%E4%BB%A4/"},{"title":"Git笔记","text":"​ 这篇文章解释了如何用版本管理工具git管理代码，远端仓库用的是知名同性交流社区GitHub，当然你也可以用GitLab、码云等其他远端仓库。 一、git使用前配置​ 1. 设置提交人姓名 1git config --global user.name 提交人姓名 ​ 2. 设置提交人邮箱 1git config --global user.email 提交人邮箱 3. 查看历史配置1git config --list 二、git本地仓库的操作 基本操作 项目代码提交–&gt;缓冲区–&gt;git本地仓库 1234git init // 初始化本地仓库git status // 查看当前项目文件夹有哪些文件需要加入缓冲区git add 文件列表/. // 将文件列表加入缓冲区,其中.表示将所有文件加入缓冲区git commit -m // 将缓冲区的文件加入git本地仓库中 使用缓冲区进行版本回退 1git checkout 文件列表 从缓冲区中将文件剔除，不被git所管理 12git rm --cached 文件列表 // 注意只是从缓冲区中剔除，可以用git add命令再次加入缓 // 冲区中 使用git本地仓库进行版本回退，注意这里是同时回退git本地仓库和项目文件 1git rest --hard commitID // commitID为缓冲区提交到本地git仓库时的序列号 git分支​ git仓库初始化时存在一条主分支master，管理员可以在主分支上创建子分支。同时git会为这个子分支分配对应的git本地仓库和项目文件。注意：每个分支都有一个git仓库和项目文件，分支与分支之间是独立的，意味着分支下对应的git仓库和项目文件也是独立的。 基本命令 12345git branch // 查看当前分支git branch 分支名 // 创建新分支git checkout 分支名 // 切换到该分支git merge 子分支名 // 合并分支git branch -d 分支名 // 删除分支，注意-d是子分支被合并后可删除，-D是不被合并进行强制删除 在不同步项目文件和本地仓库的情况下切换分支 ​ 前面我们提到如果要进行分支的切换，必须先将项目文件与本地仓库保持一致，即先将改动提交至本地git仓库，才可以切换分支。但有些时候，在develop分支上的功能未开发完全，就得切换至bug分支解决bug，你不可能将develop未开发完全的代码同步至本地仓库，那么如何暂时保存develop分支上改动的代码，在不同步至仓库的情况下，切换至bug分支呢？ 12git stash // 存储临时改动不同步至本地git仓库git stash pop // 恢复改动 **stash是git用于存储临时操作的一个栈，在任何分支下都能push当前状态，但pop出来的时候，必须切换到“栈顶状态”对应的分支。**​ ![image-20200907113633814](image-20200907113633814.png 在本地给远端创建分支 1git push -u 远端URL 新建分支名称 三、项目管理者：git本地推送到远端仓库的操作 初始化一个本地仓库，在项目的根目录下打开git Base，输入 1git init 创建项目文件，并查看当前本地仓库状态 1git status 将代码提交到本地git的缓冲区 1git add 文件名称 将缓冲区文件提交至本地git仓库 1git commit -m 本次提交描述 创建一个远端git仓库，这里用github 将本地仓库推送到远端仓库 1git push 远端仓库的URL 分支名（默认master） tips1：为远端仓库地址添加别名 1git remote add 别名 远端地址 tips2: windows记录的github账户及密码查看 tips3: 简化本地仓库提交到远端仓库命令 12git push -u 远端地址 分支 // 第一次提交输入-u参数git push // 往后都是提交到该远端地址 + 分支 上 四、其他开发者：git远端仓库clone项目–修改–重新上传至远端 将远端仓库代码拉到本地 1git clone 远端仓库URL 修改代码后，提交代码到缓冲区，再提交到本地仓库 123git status // 查看哪些文件有修改git add 被修改的文件名 // 将修改文件提交到缓冲区git commit -m 本次提交描述 // 将缓冲区更新到本地git仓库 远端仓库管理员给其他开发者放权 获得权限后，其他开发者可以将代码提交至远端仓库 1git push 远端仓库URL 分支名 执行此命令后，提交者是windows记录的GitHub账户。清除“windows凭据”后，需重新输入账号进行代码提交。 五、项目管理者：从远端仓库拉取其他开发者上传后的项目 在初始项目的本地文件夹下，打开gitBase，输入以下命令拉取 1git pull 远端仓库URL 分支 tips1:git clone 和git pull 命令的区别： git clone相当于在本地文件种下项目的一个种子，获得远端项目在clone那个时间戳的版本。git pull相当于在“种子”的基础上浇水，在git clone后的项目文件夹下执行git pull 可以获取最新的版本。 六. 多人协作开发项目时冲突的解决 A先提交版本1.1.1 B再提交版本1.1.2 解决冲突： B先拉取最新的远端仓库的项目版本代码 解决冲突后上传代码 七、git的一些技巧 用ssh密钥实现免密登录 在windows上生成基于RSA加密算法的公钥及私钥 1ssh-keygen 将生成的公钥添加入远程仓库管理员的github中 git忽略清单 创建.gitignore文件并在其中列出忽略的文件名","link":"/2020/09/07/Git%E7%AC%94%E8%AE%B0/"},{"title":"前端VUE代码部署到Tomcat服务器","text":"​ ​ 本篇文章讲述了如何在阿里云服务器上的Tomcat部署前端项目： 1.对应操作系统下（一般为Linux）安装配置jdk和Tomcat 2.下载Xshell及Xftp工具实现对云服务器的连接和文件传输 3.将vue项目打包成disk文件，放在Tomcat服务器的webapps目录下 ​ 另外因为做项目中需要，还介绍了同一台Tomcat下部署多个vue项目。 一、部署前环境准备 Window1. jdk的安装jdk的下载地址 Path变量后面加：;%JAVA_HOME%\\bin; 2.Tomcat的安装Tomcat下载地址 &lt;1&gt;环境变量配置（参考jdk的环境变量设置）： （1）新建CATALINA_BASE变量 变量名：CATALINA_BASE 变量值：Tomcat安装位置，即刚刚解压文件夹下bin文件所在位置（2）新建CATALINA_HOME变量 变量名：CATALINA_HOME 变量值：变量值同上，填Tomcat的安装位置（3）找到Path变量，点击编辑 变量名：Path 变量值：%CATALINA_HOME%\\bin（不要删除原有path变量值，直接在最后一行添加上这一句即可） &lt;2&gt; 服务器访问端口配置 ​ Tomcat默认使用80端口，但是我们的主软件和APP都要部署前端服务，所以不能使用同一端口，端口的配置在解压根目录下的conf文件夹下的server.xml文件中配置。 &lt;3&gt;服务器的启动及关闭 &lt;4&gt;部署成功测试 Linux1.jdk的安装​ 因为实验室阿里云上安装好了jdk这里可以百度解决，占个坑以后补。 2.Tomcat的安装Tomcat下载地址 &lt;1&gt;环境变量配置 在其中添加以下内容： 123export CATALINA_HOME=（Tomcat安装位置，即刚刚解压文件夹下bin文件所在位置）export CLASSPATH=.:$JAVA_HOME/lib:$CATALINA_HOME/libexport PATH=$PATH:$CATALINA_HOME/bin 按ESC键推出编辑模式，输入:wq保存后退出 &lt;2&gt; 端口配置 ​ 修改/home/cloud/apache-tomcat-9.0.34/conf下的server.Xml文件，在目录下 输入 vim server.xml进入文件，按 “i” 进入编辑模式 ，”ESC”退出编辑模式 ，”:wq”保存并退出。 &lt;3&gt;服务器的启动及关闭 ​ 进入tomcat的bin目录下 &lt;4&gt; 部署成功测试 二、本地计算机连接至远端服务器Xshell及Xftp工具下载1. Xshell的下载Xshell下载地址 2.Xftp的下载因为是一个公司的产品，参考Xshell安装过程。 Xshell及Xftp工具使用1.Xshell的使用打开Xshell软件: 点击文件-&gt;新建 点击连接，如果连接成功则会进入Linux命令行界面 2. Xftp的使用Xftp的使用在Xshell界面中，点击图示部分的按钮即可。 三、打包前端代码——disk文件夹至远端服务器 拿到代码后，首先要看代码根目录下是否有dist文件夹，这里保存的是我们打包后的项目代码，如果有的话，直接跳到第⑤步，没有的话，需要打包。 看代码中是否有node_module文件夹，这个是前端开发过程中所使用的到的的依赖包，如果没有的话是无法直接打包的,一般这个由于比较大，所以不会随着代码一起附带。如果有，跳到第④步。 根据代码中的package.json文件来安装相关npm依赖包，cd到package.json文件同级目录下后，执行指令。 1npm install // 安装项目相关依赖 执行打包操作，在package.json同级目录下，执行以下代码。 1npm run build // 对项目文件进行打包 将打包后的dist文件夹下的内容放到服务器中Tomcat部署的根目录下的/webapps/ROOT 目录下，覆盖掉原本的文件，然后再在其他主机上访问该服务器的IP和端口。如果访问到以下内容，说明前端部署成功。 注意这里要重启Tomcat服务器 四、在同一IP+Port下的一个Tomcat上部署多个前端项目​ 以上是在Tomcat服务器上部署一个vue项目，但如果要在该Tomcat下再部署一个vue项目，则不能再次将文件夹放在Tomcat的ROOT文件夹下。可以按照以下步骤进行： 参考教程 修改vue项目文件的配置 &lt;1&gt; 修改路由配置文件,这是vue-cli3脚手架的路由文件路径 ​ &lt;2&gt; 修改index.js配置文件 ​ &lt;3&gt; 重新生成disk文件 Tomcat的配置 &lt;1&gt;修改config目录下的server.xml文件 ​ &lt;2&gt;将项目的disk文件放进对应项目的文件夹下 web.xml放入以下内容： 1234567891011121314151617&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" version=\"3.0\" metadata-complete=\"true\"&gt; &lt;display-name&gt;webapp&lt;/display-name&gt; &lt;description&gt; webapp &lt;/description&gt; &lt;error-page&gt; &lt;error-code&gt;404&lt;/error-code&gt; &lt;location&gt;/index.html&lt;/location&gt; &lt;/error-page&gt; &lt;/web-app&gt; ​ &lt;3&gt;测试配置是否成功 运行脚本关闭后，再启动Tomcat服务器 123在Tomcat安装目录，bin目录下执行：./startup.sh // 开启服务器./shutdown.sh // 关闭服务器 访问两个项目的URL查看是否成功","link":"/2020/09/09/%E5%89%8D%E7%AB%AFVUE%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2%E5%88%B0Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"title":"vue-cli3项目梳理","text":"​ 这篇文章是对初学VUE项目的一个总结，包括vue-cli3项目的初始化，项目文件结构，及基本表格的增删改查，与后端的交互。 一、vue-cli3初始化vue项目及项目文件结构 安装后cmd运行 vue ui命令，打开vue项目图形管理界面 ，初始化一个项目。 安装Element-UI及axios插件 项目结构梳理 二、项目的路由及初始化布局​ 1、一般项目都有两个基础组件login及Home。首先我们将路由配置好。 ​ 2、登录页面的编写，登录页面html+css结构可参考源码。 ​ 登录页面逻辑：输入用户和密码后获取token并将其保存至本地浏览器的sessionStorage中，后跳转路由至主页。 ​ 3、主页以Home为父组件，将页面拆分为三部分，header、sideBar、content。 ​ 首先布局主页 &lt;1&gt;Head要点 &lt;2&gt;siderBar要点 &lt;3&gt;Content要点 ​ content是跳转项目各个功能页面的容器，其放路由占位符即可，页面的整体CSS也可在此调整。 三、基本表的增删改查查： 增: 改： 删： ​ 这里用的的element组件有el-table、el-form、其中表单的三个属性ref、:rules、:model重要，注意el-form-item的prop与el-input的v-model必须绑定的变量相同才能实现自校验。","link":"/2020/10/13/vue-cli3%E9%A1%B9%E7%9B%AE%E6%A2%B3%E7%90%86/"}],"tags":[],"categories":[]}